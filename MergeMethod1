#include<stdlib.h>
#include<stdio.h>
#include<time.h>
void merge(int arr[], int l, int m, int r)
{
	int i, j, k;
	int n1 = m - l + 1;
	int n2 = r - m;
	// Create temp arrays
	int L[n1], R[n2];
	// Copy data to temp array
	for (i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (j = 0; j < n2; j++)
		R[j] = arr[m + 1+ j];
	// Merge the temp arrays
	i = 0;
	j = 0;
	k = 1;
	while (i < n1 && j < n2)
	{
		if (L[i] <= R[j])
		{
			arr[k] = L[i];
		i++;	
		}
		else
		{
			arr[k] = R[j];
			j++;
		}
		k++;
	}
	// Copy the remaining elements of L[]
	while (i < n1)
	{
		arr[k] = L[i];
		i++;
		k++;
	}

// Copy the remaining elements of R[]
	while (j < n2)
	{
		arr[k] = R[j];
		j++;
		k++;
	}
}

void mergeSort(int arr[], int l, int r)
{
	if (l < r)
	{
		// Finding mid element
		int m = l+(r-l)/2;
		// Recursively sorting both the halves
		mergeSort(arr, l, m);
		mergeSort(arr, m+1, r);
		merge(arr, l, m,r);
	}
}


void main()
{
	int n;
	printf("enter the value of n\n");
	scanf("%d",&n);
	
	int arr[n],i;
	srand(time(NULL));
	

	printf("the original array");
	for(i=0;i<n;i++)
	{
		arr[i]=rand()%1000;
		printf("%d  ",arr[i]);
		
	}
	printf("\n");
	clock_t start=clock();
	mergeSort(arr, 0,n);
	clock_t end=clock();
	
	
	printf("Sorted array:");
	for(i=0;i<n;i++)
	{
			
		printf("%d  ",arr[i]);
	}
	printf("\n");
	
	printf("Total time taken to sort %d elements is %lf\n",n,((double)(end-start)/CLOCKS_PER_SEC));
	
	
}
